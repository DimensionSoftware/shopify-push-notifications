{"version":3,"file":"api.ts.umd.js","sources":["../src/api.ts"],"sourcesContent":["import fetch from 'node-fetch'\n\nconst crypto = require('crypto'),\n  querystring = require('querystring'),\n  secret = process.env.SECRET // we must securely agree on this\n\nexport const push = (store: string, secret: string) => {\n  const shop =\n    store.indexOf('.myshopify.com') > -1 ? store : `${store}.myshopify.com`\n  return {\n    token: (token: string) => {\n      // TODO use body?\n      const seed = (\n          (crypto.randomFillSync(new Uint32Array(1))[0] / 4294967295) *\n          100\n        )\n          .toString()\n          .replace(/[^\\d]/, ''),\n        url = `path_prefix=/apps/dimensionauth/api/push-token?token=${token}&shop=${shop}&seed=${seed}`,\n        sig = signature(secret, url)\n      // print entire request, including loginLink\n      console.log(\n        `https://${shop}/apps/dimensionauth/token?token=${token}&seed=${seed}&sig=${sig}`\n      )\n      return false\n    },\n    message: (title: string, message: string, payload: object) => {\n      return false\n    }\n  }\n}\n\n// helper fns\n// --------\n// generate signature required for request\nfunction signature(secret: string, url: string) {\n  const seed = (\n      (crypto.randomFillSync(new Uint32Array(1))[0] / 4294967295) *\n      100\n    )\n      .toString()\n      .replace(/[^\\d]/, ''),\n    query = querystring.parse(url),\n    q = Object.assign({}, query),\n    sortedParams = Object.keys(q)\n      .sort()\n      .reduce((m, a) => {\n        m.push(`${a}=${q[a]}`)\n        return m\n      }, [])\n      .join(''),\n    hmac = crypto.createHmac('sha256', secret)\n  console.log('sorted params: ', sortedParams)\n  hmac.update(sortedParams)\n  return hmac.digest('hex')\n}\n"],"names":["crypto","require","querystring","store","secret","shop","indexOf","token","seed","randomFillSync","Uint32Array","toString","replace","sig","url","query","parse","q","Object","assign","sortedParams","keys","sort","reduce","m","a","push","join","hmac","createHmac","console","log","update","digest","signature","message","title","payload"],"mappings":"kMAEMA,EAASC,QAAQ,UACrBC,EAAcD,QAAQ,+BAGHE,EAAeC,OAC5BC,EACJF,EAAMG,QAAQ,mBAAqB,EAAIH,EAAWA,yBAC7C,CACLI,eAAQA,OAEAC,GACDR,EAAOS,eAAe,IAAIC,YAAY,IAAI,GAAK,WAChD,KAECC,WACAC,QAAQ,QAAS,IAEpBC,EAgBR,SAAmBT,EAAgBU,IAE5Bd,EAAOS,eAAe,IAAIC,YAAY,IAAI,GAAK,WAChD,KAECC,WACAC,QAAQ,QAAS,QACpBG,EAAQb,EAAYc,MAAMF,GAC1BG,EAAIC,OAAOC,OAAO,GAAIJ,GACtBK,EAAeF,OAAOG,KAAKJ,GACxBK,OACAC,gBAAQC,EAAGC,UACVD,EAAEE,KAAQD,MAAKR,EAAEQ,IACVD,GACN,IACFG,KAAK,IACRC,EAAO5B,EAAO6B,WAAW,SAAUzB,UACrC0B,QAAQC,IAAI,kBAAmBX,GAC/BQ,EAAKI,OAAOZ,GACLQ,EAAKK,OAAO,OAnCPC,CAAU9B,0DAD8CG,WAAcF,WAAaG,UAG3FsB,QAAQC,eACK1B,qCAAuCE,WAAcC,UAAYK,IAEvE,GAETsB,iBAAUC,EAAeD,EAAiBE,UACjC"}